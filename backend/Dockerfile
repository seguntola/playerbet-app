# backend/Dockerfile
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
WORKDIR /app
EXPOSE 80

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src
COPY ["PlayerBet.Api/PlayerBet.Api.csproj", "PlayerBet.Api/"]
RUN dotnet restore "PlayerBet.Api/PlayerBet.Api.csproj"
COPY . .
WORKDIR "/src/PlayerBet.Api"
RUN dotnet build "PlayerBet.Api.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "PlayerBet.Api.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "PlayerBet.Api.dll"]

# frontend/tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'playerbet-blue': '#2563eb',
        'playerbet-purple': '#7c3aed',
        'playerbet-green': '#10b981',
        'playerbet-yellow': '#f59e0b',
      },
      fontFamily: {
        'sans': ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'sans-serif'],
      },
      animation: {
        'bounce-slow': 'bounce 2s infinite',
        'pulse-slow': 'pulse 3s infinite',
      },
      boxShadow: {
        'neon-blue': '0 0 20px rgba(37, 99, 235, 0.5)',
        'neon-purple': '0 0 20px rgba(124, 58, 237, 0.5)',
        'neon-green': '0 0 20px rgba(16, 185, 129, 0.5)',
      },
      backdropBlur: {
        xs: '2px',
      }
    },
  },
  plugins: [],
  safelist: [
    // Ensure these classes aren't purged since they're generated dynamically
    'text-blue-400',
    'text-purple-400',
    'text-green-400',
    'text-yellow-400',
    'text-red-400',
    'text-orange-400',
    'text-pink-400',
    'text-indigo-400',
    'text-emerald-400',
    'bg-blue-500/20',
    'bg-purple-500/20',
    'bg-green-500/20',
    'bg-yellow-500/20',
    'bg-red-500/20',
    'bg-orange-500/20',
    'bg-pink-500/20',
    'bg-indigo-500/20',
    'bg-emerald-500/20',
    'border-blue-500',
    'border-purple-500',
    'border-green-500',
    'from-blue-500',
    'to-purple-600',
    'hover:from-blue-600',
    'hover:to-purple-700',
  ]
}

# frontend/postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

# frontend/.gitignore
# Dependencies
/node_modules
/.pnp
.pnp.js

# Testing
/coverage

# Production
/build

# Misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE
.vscode/
.idea/

# backend/.gitignore
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
##
## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/

# Visual Studio 2015/2017 cache/options directory
.vs/

# Visual Studio Code
.vscode/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# JetBrains Rider
.idea/
*.sln.iml

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Environment variables
.env
.env.local
.env.development
.env.production

# Database
*.db
*.sqlite

# Package setup file - setup.sh
#!/bin/bash

echo "🎯 PlayerBet Setup Script"
echo "========================="

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo "❌ Docker is not installed. Please install Docker first."
    echo "   Visit: https://docs.docker.com/get-docker/"
    exit 1
fi

# Check if Docker Compose is installed
if ! command -v docker-compose &> /dev/null; then
    echo "❌ Docker Compose is not installed. Please install Docker Compose first."
    echo "   Visit: https://docs.docker.com/compose/install/"
    exit 1
fi

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo "❌ Node.js is not installed. Please install Node.js first."
    echo "   Visit: https://nodejs.org/"
    exit 1
fi

echo "✅ Prerequisites check passed!"
echo ""

# Setup backend
echo "🔧 Setting up backend..."
cd backend

# Start PostgreSQL with Docker Compose
echo "Starting PostgreSQL database..."
docker-compose up -d postgres

# Wait for PostgreSQL to be ready
echo "Waiting for PostgreSQL to be ready..."
sleep 10

# Check if .NET is installed
if ! command -v dotnet &> /dev/null; then
    echo "❌ .NET 8.0 SDK is not installed. Please install .NET 8.0 SDK first."
    echo "   Visit: https://dotnet.microsoft.com/download/dotnet/8.0"
    exit 1
fi

cd PlayerBet.Api

# Restore NuGet packages
echo "Restoring .NET packages..."
dotnet restore

# Run database migrations
echo "Running database migrations..."
dotnet ef database update

# Start the API in background
echo "Starting backend API..."
dotnet run &
BACKEND_PID=$!

cd ../../

# Setup frontend
echo "🔧 Setting up frontend..."
cd frontend

# Install npm packages
echo "Installing npm packages..."
npm install

# Start the frontend
echo "Starting frontend..."
npm start &
FRONTEND_PID=$!

cd ../

echo ""
echo "🚀 PlayerBet is starting up!"
echo "================================"
echo "Backend API: http://localhost:5000"
echo "Frontend:    http://localhost:3000"
echo "Database:    PostgreSQL on port 5432"
echo ""
echo "Demo Account:"
echo "- Create a new account to get $1000 bonus"
echo "- Or use existing test data in the database"
echo ""
echo "Press Ctrl+C to stop all services"

# Wait for interrupt
wait

# Cleanup function
cleanup() {
    echo ""
    echo "🛑 Shutting down services..."
    kill $BACKEND_PID 2>/dev/null
    kill $FRONTEND_PID 2>/dev/null
    cd backend && docker-compose down
    echo "✅ All services stopped"
    exit 0
}

# Set trap to cleanup on script exit
trap cleanup INT

# Keep script running
wait

# Development commands reference - dev-commands.md
# PlayerBet Development Commands

## Backend Commands

### Database
```bash
# Create new migration
dotnet ef migrations add MigrationName

# Update database
dotnet ef database update

# Remove last migration
dotnet ef migrations remove

# Generate SQL script
dotnet ef script-migration

# Drop and recreate database
dotnet ef database drop
dotnet ef database update
```

### Development
```bash
# Restore packages
dotnet restore

# Build project
dotnet build

# Run project
dotnet run

# Run with hot reload
dotnet watch run

# Run tests
dotnet test
```

## Frontend Commands

### Development
```bash
# Install packages
npm install

# Start development server
npm start

# Build for production
npm run build

# Run tests
npm test

# Eject (not recommended)
npm run eject
```

### Tailwind
```bash
# Rebuild Tailwind (if needed)
npx tailwindcss -i ./src/index.css -o ./build/static/css/main.css --watch
```

## Docker Commands

### Development
```bash
# Start all services
docker-compose up -d

# Start only database
docker-compose up -d postgres

# Stop all services
docker-compose down

# View logs
docker-compose logs -f

# Rebuild services
docker-compose build --no-cache
```

### Database Management
```bash
# Connect to PostgreSQL
docker exec -it playerbet_postgres psql -U postgres -d PlayerBetDb

# Backup database
docker exec playerbet_postgres pg_dump -U postgres PlayerBetDb > backup.sql

# Restore database
docker exec -i playerbet_postgres psql -U postgres PlayerBetDb < backup.sql
```

## Git Commands

### Development Workflow
```bash
# Create feature branch
git checkout -b feature/bet-types

# Stage changes
git add .

# Commit changes
git commit -m "Add Smart Play and Perfect Pick bet types"

# Push branch
git push origin feature/bet-types

# Merge to main
git checkout main
git merge feature/bet-types
```

## Debugging

### Backend Debugging
```bash
# Run with specific environment
ASPNETCORE_ENVIRONMENT=Development dotnet run

# Enable detailed logging
dotnet run --verbosity detailed
```

### Frontend Debugging
```bash
# Run with debug info
REACT_APP_DEBUG=true npm start

# Analyze bundle size
npm run build
npx serve -s build
```